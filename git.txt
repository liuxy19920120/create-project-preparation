git 分布式版本控制系统
安装git,直接下载安装程序，安装完成后，在开始菜单中找到git-->git bash
在命令行中输入
git config --global user.name 'name'
git config --global user.email 'email'
创建版本库
mkdir 版本库名称
cd 版本库名称
git init 将这个版本库目录变成git可以管理的仓库
.git目录是git用来跟踪管理版本库的，不要随便改动，.git是隐藏的，用ls -ah命令可以看见。
所有的版本控制系统只能跟踪文本文件的改动，图片、视频这些二进制文件没办法跟踪变化，只知道改动了，但是具体改了哪里不知道。
git status 随时查看工作区的状态
git diff 查看修改内容
git log 查看最近到最远的提交日志
git reset --hard Head` 将当前版本回退到上一个版本
git reset --hard commit-id(版本号可以不写全) 回退或前进到指定版本
git reflog 记录每一次指令
HEAD指向的版本是当前版本，git允许我们在版本之间历史穿梭，git reset --hard commit-id
穿梭前 git log 查看提交历史，确定要回退到哪个版本
重返未来 git reflog 查看历史命令 ，确定回到未来的版本
git add 文件名 将工作区的内容添加到暂存区
git commit -m '提交信息' 提交更改，将暂存区内容添加到当前分支，创建版本库时，git自动为我们创建了唯一一个master分支，git commit 就是向master分支上提交更改。
git reset HEAD file 可以把暂存区的修改撤销掉，重新放回工作区
git checkout --file 撤销工作区的修改
rm file 删除文件
git rm file 
git commit -m 'delete file' 从版本库中删除文件
将本地git 连接到GitHub上
git remote add git@github.com:账户名/仓库名.git
git push -u origin master 将本地库的内容推送到远程库上
git push 将本地库推送到远程，git不但会把本地的master分支内容推送到远程新的master分支上，还会把本地master分支和远程的master分支关联起来
git checkout -b dev 创建新分支dev并切换到当前分支上
git branch dev 创建分支
git checkout dev 切换分支
git branch 查看当前分支
git checkout master 切换到主分支
git merge dev 合并dev分支到master分支上
git branch -d dev 删除dev分支
git 无法自动合并分支时，必须首先解决冲突，解决冲突后，在提交，合并完成
git log --graph 查看分支合并图
master分支应该是非常稳定的，也就是用来发布新的版本，平时不能再上面干活，在dev分支上干活
git stash 将当前工作现场隐藏起来，等以后恢复现场后继续工作
git merge --no-ff -m 'merger bug' 分支名 普通合并
git stash list 查看隐藏的工作现场
git stash apply 恢复工作现场
git stash drop 删除隐藏的内容
git stash pop 恢复的同时将stash内容也删除了
git stash apply stash名 恢复指定的stash
git branch -D 分支名 强行删除未合并的分支
git remote 查看远程库的信息
git remote -v 显示更详细的信息
多人协作的工作模式
1.git push origin branch-name 推送自己的修改
2.推送失败，远程分支比本地更新，需要先用git pull 合并
3.合并冲突，解决冲突，本地提交
4.git push origin branch-name
本地分支和远程分支链接关系没有创建
git branch --set-upstream branch-name origin/branch-name
在本地创建和远程分支对用的分支
git checkout -b branch-name origin/branch-name
git打标签
git checkout branch-name
git tag name
git tag 查看标签
git tag name commit-id 在对应的id上打标签
git show name 查看标签信息
git tag -a name -m 标签说明 创建带有说明的标签
git tag -d name 删除标签名
git push origin tagName 推送标签到远程
git push origin --tags 一次性推送本地标签到远程
git tag -d tagname 删除本地标签
git push origin :refs/tags/tagname 从远程删除
搭建git服务器
git status  查看文件的状态
	 Untracked files:  未跟踪 没有提到缓存区
	 changes to be committed 已缓存 提交到了缓存区
		new file 首次提交到缓存区
		modified 被改进的，在缓存区已经有了 在工作又修改了
	Changes not staged for commit  更改了工作区的文件，为提交到缓存区


每次commit一次，都会有一个commit_id

git log 当初提交的日志，不包含书撤销的提交
git reflog 所有的提交，包含撤销的提交

时间穿梭（旅行）

	git checkout -- file   丢弃工作区的修改 从缓存区到工作区
	git reset -- file 从版本库到缓存区
	git checkout HEAD <file>  从版本库中拉回到 缓存区和工作区 最近的一次提交


	任意的到某一次提交上上 git reset --hard HEAD^ / commit_id



HEAD 指向最新提交的一次

分支
	git branch 查看分支
	git branch -v 查看分支会显示最新一次提交到额commit_id和日志
	git branch -d test 删除test分支
	git branch test 创建test分支
	git checkout test 切换到test分支
	git checkout -b miaov 创建miaov分支并切换到miaov分支

合并分支
	git merge test# 将test分支合并到当前分支


vim编辑
	i 进行编辑的
	按esc 按冒号: 输入wq 保存退出

http://git.oschina.net/progit/
git pro 

SVN
	checkout 拉取远程的仓库的文件

	git updata 拉取远程文件
	git commit 提交本地文件到远程